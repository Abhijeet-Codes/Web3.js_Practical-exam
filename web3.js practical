1) Write the differences between Web3.js and Ether.js.
Answer - Web3.js is a library collection that allows you to interact with a local or remote Ethereum node using HTTP, IPC, or WebSocket.
Web3.js allows us to develop websites or clients that interact with the blockchain. Web3 is a name given to the third iteration of the Internet. 
An internet built using a decentralized blockchain on the mutual ledger used by cryptocurrencies like Bitcoin.
Web3 came in demand when Dedcentralization of the internet fundamentally means that no one company will keep and use your data. 
It will be stored on the blockchain, secured by cryptography.
we could be free from trusting agencies, filing complaints,
fearing internet blackouts, and even getting cryptocurrency, for just using Web3.
On the other hand, Ether.js is a Javascript framework based on the Bitcoin network and allow for create, send, and track transactions and interact with smart contracts. Ether.js is also a open source and has been adopted by a number of companies, including Microsoft and IBM.


2) Demonstrate how to read data from the Smart Contract with the
help of Web3.js.
Answer - We need the address to locate the smart contract and interact with it. 
The smart contract address can be fetched from the same page where we get the ABI. We just have to scroll up and see the "Contract" written under the "Profile summary".
The smart contract address is written in front of the contract.

we need to establish a connection to the Ethereum node. For that, we use Infura API.
//please refer to image 1
then we will go to ABI of a smart contract can be taken from .

now we need use the contract ABI as a parameter when selecting the smart contract.
every account has a smart contract in the Ethereum blockchain has an address. we need the address to locate the smart contract and interact with it.
//please refer to image 2
  we now declare the contract and initialize with the smart contract specified using the abi and the contractAddress.
//please refer to image 3
  We fetch the name of the token using name () and call(), as name () returns the function itself.
//please refer to image 4
  and call() help execute that function . we use await because call() is asynchronous and returns a promise.
  so to get the actual answer , the await stops the execution of the function until call() returns.
//please refer to image 5
